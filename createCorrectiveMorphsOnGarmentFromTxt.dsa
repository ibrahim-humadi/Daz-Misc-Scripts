// DAZ Studio version 4.22.0.16 filetype DAZ Script

(function() {
    function createMorph(morph_name, garment, objFilePath) {
        var morphBatch = new DzMorphLoaderBatch();
        var morphLoader = new DzMorphLoader();
        morphLoader.setFilename(objFilePath);
        morphLoader.setMorphName(morph_name); // Use morph name as is
        morphLoader.setMorphSubdivision(true);
        morphLoader.setSubdivisionBuiltResolution(1);
        morphLoader.setSubdivisionMinResolution(0);
        morphLoader.setSubdivisionMaxResolution(2);
        morphLoader.setSubdivisionSmoothCage(false);
        morphLoader.setSubdivisionMapping(DzMorphLoader.Catmark);
        morphLoader.setDeltaTolerance(0.001);
        morphLoader.setCreateControlProperty(false);
        morphLoader.setPropertyGroupPath("Morph Loader Pro");
        morphLoader.setReverseDeformations(true);
        morphLoader.setOverwriteExisting(DzMorphLoader.DeltasOnly);
        morphLoader.setCleanUpOrphans(true);
        morphLoader.setMorphMirroring(DzMorphLoader.DoNotMirror);

        var morphImportSettings = new DzFileIOSettings();
        morphImportSettings.setFloatValue("Scale", 1);
        morphImportSettings.setStringValue("LatAxis", "X");
        morphImportSettings.setStringValue("VertAxis", "Y");
        morphImportSettings.setStringValue("DepthAxis", "Z");
        morphImportSettings.setBoolValue("InvertLat", false);
        morphImportSettings.setBoolValue("InvertVert", false);
        morphImportSettings.setBoolValue("InvertDepth", false);
        morphImportSettings.setBoolValue("IncludeVT", false);
        morphImportSettings.setBoolValue("IncludeG", false);
        morphImportSettings.setBoolValue("IncludeUsemtl", false);
        morphImportSettings.setBoolValue("IncludeMtllib", false);
        morphImportSettings.setIntValue("RunSilent", 1);

        morphBatch.addMorph(morphLoader);
        morphBatch.createMorphs(morphImportSettings, garment, false, true);
    }

    var selectedNodes = Scene.getSelectedNodeList();
    if (selectedNodes.length < 2) {
        MessageBox.critical("Please select the figure first and then the garment.", "Error");
        return;
    }

    var figure = selectedNodes[0];
    var garment = selectedNodes[1];

    // Prompt for the directory containing the OBJ files
    var path = FileDialog.doDirectoryDialog(qsTr("Please select a Directory to import .obj files"));
    if (!path) {
        MessageBox.warning("Export cancelled.");
        return;
    }

    // Prompt for the pose list file
    var poseFilePath = FileDialog.doFileDialog("Select a Pose List File", "*.txt");
    if (!poseFilePath) {
        MessageBox.warning("Operation canceled. No pose list file selected.", "Warning");
        return;
    }

    var poseFile = new DzFile(poseFilePath);
    if (!poseFile.open(DzFile.ReadOnly)) {
        MessageBox.critical("Failed to open pose list file.", "Error");
        return;
    }

    var contentMgr = App.getContentMgr();

    while (true) {
        var poseLine = poseFile.readLine();
        if (!poseLine) {
            break; // End of file
        }

        poseLine = poseLine.trim();
        if (!poseLine || poseLine.startsWith("#")) {
            continue; // Skip empty or commented lines
        }

        // Split the line into pose URI and morph name
        var parts = poseLine.split("//");
        if (parts.length !== 2) {
            print("Invalid line format: " + poseLine);
            continue;
        }

        var poseUri = parts[0].trim();
        var morphName = parts[1].trim(); // Keep morph name as is
        print("Processing pose: " + poseUri + " with morph name: " + morphName);

        try {
            // Apply the pose to the figure
            figure.select(true);
            garment.select(false);
            var myUri = DzUri(poseUri);
            contentMgr.openUri(myUri);
            print("Applied pose: " + poseUri);

            // Generate the full path to the corresponding OBJ file
            var objFilePath = path + "/" + morphName + ".obj";
            print("Using OBJ file: " + objFilePath);

            // Create the morph on the garment
            figure.select(false);
            garment.select(true);
            createMorph(morphName, garment, objFilePath);

        } catch (err) {
            print("Error applying pose or creating morph: " + err.message);
        }
    }

    poseFile.close();
    print("Process complete. Morphs created for all poses.");
})();
